#include <fstream>

void Write_Erasure()
{
  std::fstream fd;

  fd.open("RS_Erasure.vhd", std::fstream::out);

  fd << "library IEEE;\n"
        "use IEEE.std_logic_1164.all;\n"
        "use IEEE.numeric_std.all;\n"
        "use work.ReedSolomon.all;\n"
        "\n"
        "entity Erasure is\n"
        "  port (\n"
        "    clock          : in  std_logic;\n"
        "    reset          : in  std_logic;\n"
        "    enable         : in  std_logic;\n"
        "    erase          : in  std_logic;\n"
        "    done           : out std_logic;\n"
        "    erasures       : out T2_array;\n"
        "    erasures_count : out unsigned(T downto 0));\n"
        "end Erasure;\n"
        "\n"
        "architecture Erasure of Erasure is\n"
        "  component field_element_multiplier\n"
        "    port (\n"
        "      u : in  field_element;\n"
        "      v : in  field_element;\n"
        "      w : out field_element);\n"
        "  end component;\n"
        "\n"
        "  signal enable_operation : std_logic;\n"
        "\n"
        "  signal counter          : unsigned(SYMBOL_LENGTH downto 0);\n"
        "  signal erasures_counter : unsigned(SYMBOL_LENGTH downto 0);\n"
        "\n"
        "  signal alpha : field_element;\n"
        "\n"
        "  signal temp_erasures      : T2_array;\n"
        "  signal multipliers_output : T2_array;\n"
        "  signal erasures_helper    : T2_array;\n"
        "  \n"
        "begin\n"
        "  multipliers : for I in 0 to T2 generate\n"
        "    terms : field_element_multiplier port map (temp_erasures(I), alpha, multipliers_output(I));\n"
        "  end generate multipliers;\n"
        "\n"
        "  erasures_helper(0) <= alpha_zero when reset = '1';\n"
        "  addition : for J in 1 to T2 generate\n"
        "    erasures_helper(J) <= (others => '0') when reset = '1' or enable = '1' else\n"
        "                          multipliers_output(J - 1) xor temp_erasures(J) when erase = '1' and enable_operation = '1';\n"
        "  end generate addition;\n"
        "\n"
        "  -----------------------------------------------------------------------------\n"
        "  -- Enable operation\n"
        "  -----------------------------------------------------------------------------\n"
        "  process(clock)\n"
        "  begin\n"
        "    if clock'event and clock = '1' then\n"
        "      if reset = '1' or counter = N_LENGTH then\n"
        "        enable_operation <= '0';\n"
        "      elsif enable = '1' then\n"
        "        enable_operation <= '1';\n"
        "      end if;\n"
        "    end if;\n"
        "  end process;\n"
        "  \n"
        "  -----------------------------------------------------------------------------\n"
        "  -- Counter to control the polynomial generation\n"
        "  -----------------------------------------------------------------------------\n"
        "  process(clock)\n"
        "  begin\n"
        "    if clock'event and clock = '1' then\n"
        "      if reset = '1' or enable_operation = '0' then\n"
        "        counter <= (others => '0');\n"
        "      elsif enable_operation = '1' then\n"
        "        counter <= counter + 1;\n"
        "      end if;\n"
        "    end if;\n"
        "  end process;\n"
        "\n"
        "  -----------------------------------------------------------------------------\n"
        "  -- Generate decreasing alphas to populate erasure polynomial\n"
        "  -----------------------------------------------------------------------------\n"
        "  process(clock)\n"
        "  begin\n"
        "    if clock'event and clock = '1' then\n"
        "      if reset = '1' or enable = '1' then\n"
        "        alpha <= alpha_zero;\n"
    "      elsif enable_operation = '1' then\n";

  if (primPoly == 285)
  {
    fd << "        alpha(7) <= alpha(0);\n"
          "        alpha(6) <= alpha(7);\n"
          "        alpha(5) <= alpha(6);\n"
          "        alpha(4) <= alpha(5);\n"
          "        alpha(3) <= alpha(4) xor alpha(0);\n"
          "        alpha(2) <= alpha(3) xor alpha(0);\n"
          "        alpha(1) <= alpha(2) xor alpha(0);\n"
          "        alpha(0) <= alpha(1);\n";
  }
  else if (primPoly == 391)
  {
    fd << "        alpha(7) <= alpha(0);\n"
          "        alpha(6) <= alpha(7) xor alpha(0);\n"
          "        alpha(5) <= alpha(6);\n"
          "        alpha(4) <= alpha(5);\n"
          "        alpha(3) <= alpha(4);\n"
          "        alpha(2) <= alpha(3);\n"
          "        alpha(1) <= alpha(2) xor alpha(0);\n"
          "        alpha(0) <= alpha(1) xor alpha(0);\n";
  }

  fd << "      end if;\n"
        "    end if;\n"
        "  end process;\n"
        "\n"
        "  -----------------------------------------------------------------------------\n"
        "  -- Erasures counter\n"
        "  -----------------------------------------------------------------------------\n"
        "  process(clock)\n"
        "  begin\n"
        "    if clock'event and clock = '1' then\n"
        "      if reset = '1' or enable = '1' then\n"
        "        erasures_counter <= (others => '0');\n"
        "      elsif enable_operation = '1' then\n"
        "        if erase = '1' then\n"
        "          erasures_counter <= erasures_counter + 1;\n"
        "        else\n"
        "          erasures_counter <= erasures_counter;\n"
        "        end if;\n"
        "      end if;\n"
        "    end if;\n"
        "  end process;\n"
        "\n"
        "  -----------------------------------------------------------------------------\n"
        "  -- Erasures polynomial\n"
        "  -----------------------------------------------------------------------------\n"
        "  process(clock)\n"
        "  begin\n"
        "    if clock'event and clock = '1' then\n"
        "      if reset = '1' or enable = '1' then\n"
        "        temp_erasures    <= (others => (others => '0'));\n"
        "        temp_erasures(0) <= (0      => '1', others => '0');\n"
        "      elsif enable_operation = '1' then\n"
        "        temp_erasures <= erasures_helper;\n"
        "      end if;\n"
        "    end if;\n"
        "  end process;\n"
        "\n"
        "  -----------------------------------------------------------------------------\n"
        "  -- Set done signal\n"
        "  -----------------------------------------------------------------------------\n"
        "  process(counter)\n"
        "  begin\n"
        "    if counter /= N_LENGTH + 1 then\n"
        "      done <= '0';\n"
        "    else\n"
        "      done <= '1';\n"
        "    end if;\n"
        "  end process;\n"
        "\n"
        "  -----------------------------------------------------------------------------\n"
        "  -- Output erasures polynomial\n"
        "  -----------------------------------------------------------------------------\n"
        "  erasures <= temp_erasures;\n"
        "\n"
        "  -----------------------------------------------------------------------------\n"
        "  -- Output erasures count\n"
        "  -----------------------------------------------------------------------------\n"
        "  erasures_count <= erasures_counter;\n"
        "  \n"
        "end Erasure;\n";

  fd.close();
}
