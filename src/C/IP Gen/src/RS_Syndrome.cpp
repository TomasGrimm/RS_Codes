#include <fstream>

void Write_Syndrome()
{
  std::fstream fd;

  fd.open("RS_syndrome.vhd", std::fstream::out);

  fd << "library IEEE;\n"
        "use IEEE.std_logic_1164.all;\n"
        "use IEEE.numeric_std.all;\n"
        "use work.ReedSolomon.all;\n"
        "\n"
        "entity Syndrome is\n"
        "  port (\n"
        "    clock           : in std_logic;\n"
        "    reset           : in std_logic;\n"
        "    start           : in std_logic;\n"
        "    received_vector : in field_element;\n"
        "\n"
        "    done     : out std_logic;\n"
        "    syndrome : out T2less1_array);\n"
        "end entity;\n"
        "\n"
        "architecture Syndrome of Syndrome is\n"
        "  component field_element_multiplier is\n"
        "    port (\n"
        "      u : in  field_element;\n"
        "      v : in  field_element;\n"
        "      w : out field_element);\n"
        "  end component;\n"
        "\n"
        "  signal enable_operation : std_logic;\n"
        "\n"
        "  signal registers       : T2less1_array;\n"
        "  signal multiplications : T2less1_array;\n"
        "\n"
        "  signal counter : unsigned(T - 1 downto 0);\n"
        "  \n"
        "begin\n"
        "  multipliers : for I in 0 to T2 - 1 generate\n"
        "    synd : field_element_multiplier port map (registers(I), roots(I), multiplications(I));\n"
        "  end generate multipliers;\n"
        "\n"
        "  -----------------------------------------------------------------------------\n"
        "  -- Enable operation\n"
        "  -----------------------------------------------------------------------------\n"
        "  process(clock)\n"
        "  begin\n"
        "    if clock'event and clock = '1' then\n"
        "      if reset = '1' or counter = N_LENGTH then\n"
        "        enable_operation <= '0';\n"
        "      elsif start = '1' then\n"
        "        enable_operation <= '1';\n"
        "      end if;\n"
        "    end if;\n"
        "  end process;\n"
        "  \n"
        "  -----------------------------------------------------------------------------\n"
        "  -- Counter to control the syndrome calculation\n"
        "  -----------------------------------------------------------------------------\n"
        "  process(clock)\n"
        "  begin\n"
        "    if clock'event and clock = '1' then\n"
        "      if reset = '1' or enable_operation = '0' then\n"
        "        counter <= (others => '0');\n"
        "      elsif enable_operation = '1' then\n"
        "        counter <= counter + 1;\n"
        "      end if;\n"
        "    end if;\n"
        "  end process;\n"
        "\n"
        "  -----------------------------------------------------------------------------\n"
        "  -- Syndromes sum with intermediate results\n"
        "  -----------------------------------------------------------------------------\n"
        "  process(clock)\n"
        "  begin\n"
        "    if clock'event and clock = '1' then\n"
        "      if reset = '1' or start = '1' then\n"
        "        registers <= (others => (others => '0'));\n"
        "      elsif enable_operation = '1' then\n"
        "        for i in 0 to T2 - 1 loop\n"
        "          registers(i) <= received_vector xor multiplications(i);\n"
        "        end loop;\n"
        "      end if;\n"
        "    end if;\n"
        "  end process;\n"
        "\n"
        "  -----------------------------------------------------------------------------\n"
        "  -- Set done signal\n"
        "  -----------------------------------------------------------------------------\n"
        "  process(counter)\n"
        "  begin\n"
        "    if counter /= N_LENGTH then\n"
        "      done <= '0';\n"
        "    else\n"
        "      done <= '1';\n"
        "    end if;\n"
        "  end process;\n"
        "\n"
        "  -----------------------------------------------------------------------------\n"
        "  -- Output syndromes\n"
        "  -----------------------------------------------------------------------------\n"
        "  syndrome <= registers;\n"
    "end architecture;\n";

  fd.close();
}
